# TODO:
# handle ^c in client
* Introduction
  This entire project is written using the programming paradigm called literate
  programming^{ [1][2]} and this document can be "compiled" (in LP speak, it's called
  tangle) down to the actual server and client programs. The reason why we chose to
  adapt literate programming is that it focuses on explaining the program to fellow
  human beings rather the computer. In practice, we write programs like literature;
  targetting readers than machines which is quite relevant in case of an investigatory
  project. This way, we hope, our project will be useful for others who might refer
  our project in the future.

  This entire project is made using free and/or open-source software such as Emacs,
  CPython, Vim, etc. and licensed under _BSD 2 Clause "Simplified" License_.
* Client-server model
  The client-server model is made with simplicity in mind akin to the Unix
  philosophy^{ [3]}. The main motto of the message's data structure is to be
  simple yet elegant, usable by everything. One of the widely adapted data
  structures by many programming languages out of the box is JSON,
  JavaScript Object Notation.

  The message's data structure consists of two key:value pairs - =nick= and
  =msg=.
  =nick= refers to the client's nickname, =msg= refers to the message the
  client wants to send. A sample message data would be the following
#+BEGIN_SRC json :tangle no
{
  "nick": "john",
  "msg": "i went to the museum today and it was fantastic!"
}
#+END_SRC

  On forth, message would refer to the message's data structure.

  In case the server has to send some message to users, the nick is set to
  =server= for obvious reasons.

  This data will be sent to every client online except the sender. The data
  itself is not altered by the server but it might choose to ignore to send
  the data in specific cases which will be discussed in the following section.

  The client can choose the formatting, meaning endless customizability!
** Commands
   Commands can be regarded as one of the powerful features offered by our
   project. They can be used to manipulate data and the client.

   Commands are of two types, namely:
     - server-side commands
     - client-side commands

   The former is used to interact with the server, the latter can be used to
   change a client's state and/or modify the message.

   The following server-side commands are implemented:
     - =ban=
     - =disconnect=
     - =nick=
     - =list=

   Some of these can only be run by exclusive group of people that hold special
   powers, these groups will be referred to as OP. =ban= is one such command
   that can be run only by OP.

   Client-side commands are exclusive to the client and cannot interact with the
   server directly. However it might be used to alter the message.

   Some examples of client-side commands would be:
     - =switch-case=
     - =ping=
     - =prompt=

   When a user uses the =ping= command, the client would print =pong!= in response.
   The =switch-case= command would take a string as an arguement and swap its case.
   The =prompt= command would change the ui's prompt. Although these are simple
   examples, this command system basically exposes the entire client.
* Server
  Here, we include all the necessary modules: =socket=, =json= and =select=.
  From select, we only import the =select= function. The =select=
  function is used for getting a list of all the sockets that are ready
  to be read. The =select= function can only be used for sockets in NT
  which is quite limiting because in Unix, =select= can examine the status
  of /any/ file description (like stdin for example).

  On forth, =addr= will refer to a tuple (host, port) where host is the IP
  address of the client.

#+BEGIN_SRC python :tangle server-lit.py
import json
import os
import socket

from select import select
#+END_SRC

  - =SERV_SOCKET= is the server's socket object
  - =SOCKETS= is a list of all sockets that are currently online (including
    the server's)
  - =NICKS= is a dictionary whose key is the nickname and the value is
    their =addr=
  - =BANNED= is a list of all =addr=
  - =OP= is a list of all =addr= that can do OP actions

#+BEGIN_SRC python :tangle server-lit.py
SERV_SOCKET = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
NICKS       = {}
SOCKETS     = []
BANNED      = []
OP          = []
#+END_SRC
** Helpers
   Some logic are repeated more than once in the program throughout
   and some need to handle errors. So we define helper functions that
   help us avoid code repetition and handle errors.

   =send_only= is a simple function whose arguements are =data= and
   =send_to=.
   =data= is a byte encoded message.
   =send_to= is the socket object that receives =data=.

   When the client is offline and one tries to interact with its socket,
   it raises an error. This function handles the error by removing the socket
   from the following data structures so we don't repeatedly try to send or
   receive data from a broken socket.

   Data structures:
     - =NICKS=
     - =SOCKETS=

   To remove the broken socket from =NICKS=, we use the =getpeername= method
   of a socket that returns an =addr=.

#+BEGIN_SRC python :tangle server-lit.py
def send_only(data, send_to):
    try:
        send_to.send(data)
    except:
        data_dict = json.loads(data)
        del NICKS[data_dict.get("nick")]
        SOCKETS.remove(sck)
#+END_SRC

   =send_only= is convenient to have but the program becomes verbose
   if we have a =for= loop in the middle of the main loop. Separating
   an integral part such as this to a function also makes debugging easier.
   So we write a function =send_all= that sends a message to everyone
   except the sender.

   =send_all= is nothing but a wrapper around =send_only=. =send_only= does
   the heavy-lifting for us.
   =send_all= sends the message to every socket except the server's and the
   sender's.

#+BEGIN_SRC python :tangle server-lit.py
def send_all(data, sent_from):
    pass_scks = [SERV_SOCKET, sent_from]
    for sck in SOCKETS:
        if sck not in pass_scks:
            print(f"sending to {sck}")
            send_only(data, sck)
#+END_SRC
** Commands
   Commands are an important part that our server-client model offers. It is
   powerful and easily expandable. Implementing new commands should be a
   matter of second. As mentioned before, there are some commands that are
   exclusive to a certain group of users. When one tries to use a command that
   they don't have access to, we need to let them know that they can't use this
   command. Morever, we don't need to send their mistake to everyone. Creating a
   message naturally becomes a vital part.

   Creation of a message needs to be done quite often so we throw it in a separate
   function called =gen_msg= that takes an arguement called =msg= (which should
   be self-explanatory).

#+BEGIN_SRC python :tangle server-lit.py
def gen_msg(msg):
    msg = { "nick": "server", "msg": msg }
    return bytes(json.dumps(msg), "utf-8")
#+END_SRC

   =handle_cmd= function is the heavy-lifter. As the name implies, it handles
   commands. Just like everything else, =handle_cmd= function's routine is
   really elegant and simple.

   In case of a command that only requires the server to send a message to a
   particular client, it returns False otherwise it returns a message.

   =handle_cmd= takes the sender's socket and data as arguement where data is
   a dictionary and NOT a message.

#+BEGIN_SRC python :tangle server-lit.py
def handle_cmd(sck, data):
#+END_SRC

   We get the command by simple splitting and slicing, we get the sender's
   =addr= to check if they are OP and their nickname.

#+BEGIN_SRC python :tangle server-lit.py
    cmd = data.get("msg")[1:]
    addr = sck.getpeername()
    nick = data.get("nick")
#+END_SRC

   Then we do rudimentary parsing to check the command's name. If the command's
   name does not pass any of the commands, we simply return the data.

   If the command is =ban=, then we need to check if the =addr= is OP. If not, then
   we warn the user.

#+BEGIN_SRC python :tangle server-lit.py
    if cmd.startswith("ban"):
        if addr not in OP:
            msg = gen_msg("you dont have permission to use this command")
            ok  = send_only(msg, sck)
            return False
        return ban(cmd.split()[1:])
#+END_SRC

   If the command is =disconnect=, remove the =addr= from =SOCKETS= and =NICKS=.

#+BEGIN_SRC python :tangle server-lit.py
    elif cmd.startswith("disconnect"):
        SOCKETS.remove(addr)
        del NICKS[nick]
        return gen_msg(f"{nick} disconnected")
#+END_SRC

   If the command is =nick=, we change their old nickname to their new one.
   To achieve this, we delete their entry in =NICKS= and replace it with a new one.

#+BEGIN_SRC python :tangle server-lit.py
    elif cmd.startswith("nick"):
        new_nick = cmd.split()[1:]
        del NICKS[nick]
        NICKS[new_nick] = addr
        return gen_msg(f"{nick} is now {new_nick}")
    else:
        return data
#+END_SRC

   If you noticed, we have two undeclared functions =ban= and =list_users=. Since
   these commands need a little extra work, they have separate helper functions.

   In the following sections, we implement them.
*** ban
    Whenever a community is created, there's always trolls and other pesky
    people who ruin everyone's experience. The classic method of handling
    these people is simply barring them from using the service. In our
    server-client model, we call it =ban= and it alters the following data
    structures.

    - =NICKS=
    - =SOCKETS=
    - =BANNED=

    Here's the routine for the =ban= function:
    1. We check if the user that ran the command is OP.
    2. We check if the targetted user is already banned.
    3. We remove the targetted user from =NICKS= and =SOCKETS=.
    4. We add them to =BANNED= list.
    5. We generate a message that lists out all the users that have been banned.

    Step #1 is already checked in =handle_cmd=, so we need not worry about that.

    In actual practice, we do step #5 alongside other routines to increase the efficiency.

    The ban function takes a list of all the client's nickname that are to be banned. We then set the number of clients to
    a variable called =nc= and create another variable =msg= to store the message temporarily.

#+BEGIN_SRC python :tangle server-lit.py
def ban(clients):
    msg = "banned "
    nc = len(clients) - 1
#+END_SRC

    We loop through each client in =clients= and get their =addr=.

#+BEGIN_SRC python :tangle server-lit.py
    for n, i in enumerate(clients):
        addr = NICKS.get(i)
#+END_SRC

    We check if they are in =BANNED= list already and skip the iteration if they are.

#+BEGIN_SRC python :tangle server-lit.py
        if addr in BANNED:
            continue
#+END_SRC

   We append them to the =BANNED= list and remove them from =SOCKETS= list and the =NICKS= dictionary.

#+BEGIN_SRC python :tangle server-lit.py
        BANNED.append(addr)
        SOCKETS.remove(addr)
        del NICKS[i]
#+END_SRC

   We then add the nickname to =msg=.

#+BEGIN_SRC python :tangle server-lit.py
        msg += i
        if n != nc:
            msg += " "
#+END_SRC

   At last we return the message.

#+BEGIN_SRC python :tangle server-lit.py
    return gen_msg(msg)
#+END_SRC
*** list
    Another nifty command to have in hand would be the =list= command. Simply
    put, it lists all the users online. The implementation is really simple;
    we loop through =NICKS= and add each user to a variable, generate a message
    and return to sender.

#+BEGIN_SRC python :tangle server-lit.py
def list_users(send_to):
    msg = "active users\n"
    nc  = len(NICKS) - 1
    for n, i in NICKS:
        msg += i
        if n != nc:
            msg += " "
    send_only(gen_msg(msg), send_to)
#+END_SRC
** Main loop
   The main loop constructs a working server with all the building blocks
   that are functions. To get the main loop working, we need to initialize
   the =SERV_SOCKET= among other things. We do these in the =init= function.

   The =socket= module has two functions that are particularly useful when
   we initialize the server. Them being =gethostname= and =gethostbyname=.
   As the name suggests, =gethostname= returns the actual server's (the
   hardware) hostname and =gethostbyname= returns the IP address pointing
   to the hostname. We can use this to get the IP address of the server.

#+BEGIN_SRC python :tangle server-lit.py
def init():
    host = socket.gethostbyname(socket.gethostname())
    saddr = (host, 9600)
    SERV_SOCKET.bind(saddr)
    SERV_SOCKET.listen()
    SOCKETS.append(SERV_SOCKET)
    NICKS["server"] = saddr
#+END_SRC

   To make OPs and banned users permanent, we save them to files and read
   them once the server starts. To make thing easier, they are saved in =op=
   and =banned= respectively.

   We read the aforementioned files and set =OP= and =BANNED= accordingly. Note that
   we have to read the files /only/ if they are present.

   Since =OP= and =BANNED= are list of =addr=, the way the data will be written will
   be the following:

#+BEGIN_SRC
IP1 port1
IP2 port2
#+END_SRC

   To parse this file, we will create a small function inside =init= that takes
   file path as an arguement and returns a list of =addr=. Then using that function,
   we set =OP= and =BANNED=.

#+BEGIN_SRC python :tangle server-lit.py
    def read_file(path):
        res = []
        if os.path.isfile(path):
            with open(path) as f:
                for i in f.read().split("\n"):
                    a, p = i.split()
                    p = int(p)
                    res.append((a, p))
        return res

    OP     = read_file("op")
    BANNED = read_file("banned")
#+END_SRC

   To close the server /cleanly/, we need to use the =close= method of a socket
   object. And we need to write =OP= and =BANNED= to files in the format specified
   before. To do these, we write a function =on_kill= that performs the
   aforementioned actions.

#+BEGIN_SRC python :tangle server-lit.py
def on_kill():
    SERV_SOCKET.close()
    def write_file(path, lst):
        with open(path, 'w') as f:
            for i in lst:
                f.write(f"{i[0]} {i[1]}\n")
    write_file("op", OP)
    write_file("banned", BANNED)
#+END_SRC

   The main loop is simple in principle and it does very little on its own. This
   simplicity is reflected on the main loop's routine.

   We try to receive data from all readable clients. This is achieved by using
   the =select= function from the =select= module. When given a list of file
   descriptors, it can return back a list of descriptors that are can be
   read. =select= function can also be used to check for writable and executable
   file descriptors!

   The fourth arguement is timeout and we set it to zero because waiting for
   a client is pointless.

#+BEGIN_SRC python :tangle server-lit.py
def main():
    readable, _, _ = select(SOCKETS, [], [], 0)
    for sck in readable:
#+END_SRC

   If the socket that is to be read is =SERV_SOCKET=, then it implies that a new
   client is connected. We =accept= the socket and get its =addr=.

#+BEGIN_SRC python :tangle server-lit.py
        if sck == SERV_SOCKET:
            sockfd, addr = SERV_SOCKET.accept()
#+END_SRC

   If it's a banned client, we ignore it. Send a nice message to banned client
   about their state.

#+BEGIN_SRC python :tangle server-lit.py
            if addr in BANNED:
                send_only(gen_msg("you are banned"), sockfd)
#+END_SRC

   Otherwise we add it to =NICKS= and =SOCKETS= and we send a join message to
   everyone.

   Just after the request to join, we /expect/ the client to send its nickname
   as a raw string (the data sent would be "john").

#+BEGIN_SRC python :tangle server-lit.py
            else:
                nick = sockfd.recv(4096)
                send_all(f"{nick} connected")
                SOCKETS.append(sockfd)
                NICKS[nick] = addr
#+END_SRC

   If its any other socket, then it means they sent data. So we try to read them.

#+BEGIN_SRC python :tangle server-lit.py
        else:
            try:
                data = sck.recv(4096)
#+END_SRC

   We parse it to see if it's a command. For a message to qualify as a command,
   it needs to start with a =/=. If it is a command, we let =handle_cmd= do its
   work.

#+BEGIN_SRC python :tangle server-lit.py
                data_dict = json.loads(data)
                if data_dict.get("msg").startswith("/"):
                    data = handle_cmd(sck, data_dict)
#+END_SRC

   If =handle_cmd= returns False, then we skip the iteration because we need not
   send any message to everyone. Otherwise, we simply send the data to everyone.

#+BEGIN_SRC python :tangle server-lit.py
                    if not data:
                        continue
                send_all(data, sck)
#+END_SRC

   If the socket is broken, for whatever reason, then it raises
   =ConnectionResetError= error. This happens mostly when the client
   decided to disconnect. So we remove the broken socket
   from the data structures. And then send a disconnect message.

#+BEGIN_SRC python :tangle server-lit.py
               except ConnectionResetError:
                   addr = sck.getpeername()
                   nick = ""
                   for k, v in NICKS.items():
                       if v == addr:
                           nick = k
                   if nick:
                       send_all(f"{nick} disconnected")
                       del NICKS[nick]
                   SOCKETS.remove(sck)
#+END_SRC

   We only want the main loop to be run when the server is run from the terminal.
   We use the =__name__= special variable to achieve that.

   If an administrator wishes to kill the server, they can do by pressing =^C=.
   When they do that, =KeyboardInterrupt= is raised.

#+BEGIN_SRC python :tangle server-lit.py
if __name__ == "__main__":
    init()
    while 1:
        try:
            main()
        except KeyboardInterrupt:
            break
    on_kill()
#+END_SRC

* Client
  The client has two important parts - UI and customization. The UI
  is made using a classic library - =curses=. Curses^{ [4]} originally made
  for Unix terminals is a TUI library that can be used to make complex
  TUI with relative ease. One can run a curses program in NT using libraries
  like PDCurses. Pypi has =windows-curses= that installs the library in the
  correct place.

  Customization, through commands, makes the client a lot flexible than
  one might think at first. One can even write their commands in any
  language and use their output using modules like =subprocess=; although
  this might a bit inefficient but it /does/ allow some kind of flexibility.
  In some cases, it might be even faster than an implementation done
  purely in Python.

  Implementing a custom command is really easy. All one needs to do is
  make a function that takes a dictionary as an arguement and return
  a value.

  If the return value is =False=, then it implies that a message should
  not be sent to the server. For example, take =ping=,
  =pong!= is sent as a reply to the user but we need not to send
  anything back to the server, so we return =False= in =ping='s
  implementation.

  If the return value is a dictionary, then the dictionary, as JSON, is
  sent to the server. For example, take =switch-case=, when given a message
  it swaps the case of the message and it returns a dictionary whose =msg=
  value's case is swapped. This, then, is sent to the server.

  Since commands have access to the UI and the message, they can pretty do
  much anything meaning infinite customizability!
** UI
   We will save the UI in a file named =ui.py=.

   The UI is made using =curses=.

#+BEGIN_SRC python :tangle client/ui.py
import curses
import json

from select import select
#+END_SRC

   Then we make a UI class that has variables that determines the prompt
   and format of the printed message. We store these in =prompt= and
   =fmt= respectively.

   We also need the socket object of the client so we can read data
   from the server. We need the nickname of the user so we can print
   the message.

#+BEGIN_SRC python :tangle client/ui.py
class Ui:
    def __init__(self, socket, nick):
        self.prompt = "> "
        self.fmt    = "{nick} - {msg}"
        self.socket = socket
        self.nick   = nick
#+END_SRC

   We set the default value of =prompt= to be an arrow and of =fmt= to
   be ={nick} - {msg}=.

   When one prints a message to the screen, ={nick}= changes to the
   sender's nickname and =msg= changes to the sender's message.
   How do we go about doing that? Well its simple because of =str='s
   method called =format=. When given a dictionary, ={key}= changes
   to corresponding value.

   Suppose a message is like this
#+BEGIN_SRC json
{
    "nick": "john",
    "msg": "hello guys!"
}
#+END_SRC
   when printed, it changes to =john - hello guys!=.

   We have to make two curses windows for showing messages and
   taking inputs.

   _insert image here_

   The TUI looks like the image. Input is taken from a tiny
   box at the bottom of the screen and the messages are printed
   above. The width of the message window is 100% but the height
   is one less than the height of the screen.

   The width of the input window is 100% yet again but the height
   is one.

   To get the maximum height and width (called lines and columns
   respectively), we create a =stdscr= object.

#+BEGIN_SRC python :tangle client/ui.py
        stdscr = curses.initscr()
        lines, columns = stdscr.getmaxyx()
#+END_SRC

   Then we make the input window and the input window with
   the dimensions mentioned above.

#+BEGIN_SRC python :tangle client/ui.py
        self.winput = curses.newwin(1, columns, lines - 1, 0)
        self.wmsg = curses.newwin(lines - 1, columns, 0, 0)
#+END_SRC

   Then we set the message window to be scrollable and the input
   window to have =nodelay= i.e. there will no delay between
   the user keypress and the buffer the input is stored in.

#+BEGIN_SRC python :tangle client/ui.py
        self.winput.nodelay(True)
        self.wmsg.scrollok(True)
#+END_SRC

   Since we do not want the user to be printed in the main window
   and want the user input to be available as soon as possible,
   we do the following.

#+BEGIN_SRC python :tangle client/ui.py
        curses.noecho()
        curses.cbreak()
#+END_SRC

   We will define a method called =__print__= that takes a message,
   in JSON, and prints it to the message window.

#+BEGIN_SRC python :tangle client/ui.py
    def __print__(self, data):
        data = json.loads(data)
        self.wmsg.addstr(fmt.format(**data))
        self.wmsg.addstr("\n")
        self.wmsg.refresh()
#+END_SRC

   We will create a function that runs forever and is indented to be
   run in a separate. This function receives data from the socket
   and prints it to the message window. We will call this function
   =do_msg=.

#+BEGIN_SRC python :tangle client/ui.py
    def do_msg(self):
        while 1:
            readable, _, _ = select([self.socket], [], [], 0)
            if readable:
                data = self.socket.recv(4096)
                self.__print__(data)
#+END_SRC

   We will create a function which creates a message encoded in JSON
   when given a raw string. This is useful in the input routine. We
   call this function =__mkdata__=.

#+BEGIN_SRC python :tangle client/ui.py
    def __mkdata__(self, msg):
        data = json.dumps({"nick": self.nick, "msg": msg})
        return bytes(data, "utf-8")
#+END_SRC

   =do_input= is a function that is intended to run in the main thread
   and it takes input from the user and returns it as a string. It returns
   1 when the user presses =^C= so in the main loop, the exit is handled
   properly. It returns 2 when the main loop should not send any data
   to the server.

   It has =inp= as an arguement which acts as a buffer for the message.

#+BEGIN_SRC python :tangle client/ui.py
    def do_input(self, inp):
#+END_SRC

   We get the current cursor position and the current character in the
   buffer.

#+BEGIN_SRC python :tangle client/ui.py
        cury, curx = self.winput.getyx()
        ch = self.winput.getch()
        if ch != curses.ERR:
#+END_SRC

   If the =ch= is newline, then the user pressed enter. We print
   the message and we refresh the window. We return 2 if =inp=
   is empty.

#+BEGIN_SRC python :tangle client/ui.py
            if ch == ord("\n"):
                if not inp:
                    return 2
                data = self.__mkdata__(inp)
                self.__print__(data)
                self.winput.clear()
                self.winput.addstr(self.prompt)
                self.winput.refresh()
#+END_SRC

   If the user pressed backspace, we want to delete the current character.

#+BEGIN_SRC python :tangle client/ui.py
            elif ch in [curses.KEY_BACKSPACE, ord("\b"), ord("\x7f")]:
                self.winput.delch(0, curx - 1)
                inp = inp[:-1]
#+END_SRC

   Otherwise we simply add the character to =inp=.

#+BEGIN_SRC python :tangle client/ui.py
            else:
                self.winput.addch(ch)
                self.winput.refresh()
                inp += chr(ch)
#+END_SRC

   At last we return =inp=.

#+BEGIN_SRC python :tangle client/ui.py
        return inp
#+END_SRC

   When the user wants to quit the client, curses has to be closed. So we will
   create a function =kill= that safely closes curses.

#+BEGIN_SRC python :tangle client/ui.py
    def kill(self):
        curses.endwin()
#+END_SRC
** Commands
   Before implementing client-side commands, we need a nice way to represent
   user's details. To do this, we will create a dataclass^{ [5]} which
   simplifies the class declaration a lot.

   We will save this in the main file - =client.py=

   To make a dataclass, we need to import =dataclass=

#+BEGIN_SRC python :tangle client/client.py
import socket

from dataclasses import dataclass
#+END_SRC

   =User= class will have three variables - =nick=, =socket= and =server_addr=

#+BEGIN_SRC python :tangle client/client.py
@dataclass
class User:
    nick: str
    server_addr: (str, int)
    socket: socket.socket
#+END_SRC

   Out of all the server-side commands, =nick= and =disconnect= needs some
   work the client-side as well. So we will implement these.

   When implementing commands in =commands.py=, the end-user has access to
   two important classes - =UI= and =USER=.

   To implement =nick=, we simply change =nick= variable of =USER= variable
   and we return back the dict without any changes.

#+BEGIN_SRC python :tangle client/commands.py
import json

def change_nick(data):
    data_dict = json.loads(data)
    USER.nick = data_dict.get("nick")
    return data
#+END_SRC

   To implement the =disconnect=, we need to =kill= =UI= and close =USER='s
   =socket=.

#+BEGIN_SRC python :tangle client/commands.py
def disconnect(data):
    UI.kill()
    USER.socket.send(data)
    USER.socket.close()
    return False
#+END_SRC

   As an example, we will implement the =ping= and =switch-case= commands.

   The =ping= command simply needs to print =pong!= back to the message
   window.

#+BEGIN_SRC python :tangle client/commands.py
def ping(data):
    dat = json.dumps({"nick": "client", "msg": "pong!"})
    UI.__print__(data)
    return False
#+END_SRC

   The =switch-case= command needs to get the actual message by slicing
   the =msg= key.

#+BEGIN_SRC python :tangle client/commands.py
def switch_case(data):
    data = json.loads(data)
    msg = data.get("msg")[len("/switch-case "):]
    return UI.__mkdata__(msg.swapcase())
#+END_SRC

   To let the client know which function should a command run, we will
   define a dictionary =CMD= whose key is the command's name and the value
   is the function.

   If one desires to add more, they can do so by writing a function and
   adding a key:value pair to =CMD=.

#+BEGIN_SRC python :tangle client/commands.py
CMD = { "nick": change_nick,      "ping": ping,
        "disconnect": disconnect, "switch-case": switch_case }
#+END_SRC
** Main loop

* References
1. http://www.literateprogramming.com
2. https://en.wikipedia.org/wiki/Literate_programming
3. https://en.wikipedia.org/wiki/Unix_philosophy
4. curses
5. dataclass
